# Server config for http requests
proxy_cache_path /tmp/cacheapi levels=1:2 keys_zone=microcacheapi:100m max_size=1g inactive=1d use_temp_path=off;
# Server config for https requests
server {
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;
  server_name _;
  ssl_certificate /etc/cert/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/cert/privkey.pem; # managed by Certbot
  # Client-side caching
  location ~* \.(jpg|jpeg|png|gif|ico)$ {
    expires 30d;
  }
  location ~* \.(css|js)$ {
    expires 7d;
  }

  root /app;

  location /static {
    alias /app/static;
  }

  location /media {
    alias /app/media;
  }

  location @proxy_to_app {
    # Rate Limiting
    limit_req zone=addr burst=20; # Max burst of request
    limit_req_status 460; # Status to send

    # Bandwidth Limiting
    limit_rate 4096k; # Speed limit (here is on kb/s)

    # Micro caching
    proxy_cache microcacheapi;
    proxy_cache_valid 200 1s;
    proxy_cache_use_stale updating;
    proxy_cache_background_update on;
    proxy_cache_lock on;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://localhost:8000;
  }

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }
#  # Pagespeed Module
#  pagespeed on;
#  pagespeed FileCachePath /var/cache/ngx_pagespeed_cache;
#  location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
#    add_header "" "";
#  }
#  location ~ "^/pagespeed_static/" { }
#  location ~ "^/ngx_pagespeed_beacon$" { }
#  pagespeed RewriteLevel PassThrough;
#  pagespeed EnableCachePurge on;
#  pagespeed PurgeMethod PURGE;
#  pagespeed EnableFilters prioritize_critical_css;
}
# Server redirection from http to https
# server {
#   listen 80;
#   listen [::]:80;
#   server_name example.com;
#   return 301 https://$server_name$request_uri;
# }
# Server redirection with www
# server {
#   listen 80;
#   listen [::]:80;
#   listen 443 ssl http2;
#   listen [::]:443 ssl http2;
#   server_name www.example.com;
#   ssl_certificate /path/to/cert/example.com/fullchain.pem; # managed by Certbot
#   ssl_certificate_key /path/to/cert/example.com/privkey.pem; # managed by Certbot
# }
#server {
#  listen 80 default_server; # http2
#  listen [::]:80 default_server; # http2
#  server_name localhost;
#
#  # Client-side caching
#  location ~* \.(jpg|jpeg|png|gif|ico)$ {
#    expires 30d;
#  }
#  location ~* \.(css|js)$ {
#    expires 7d;
#  }
#
#  root /app;
#
#  location /static {
#    alias /app/static;
#  }
#
#  location /media {
#    alias /app/media;
#  }
#
#  location @proxy_to_app {
#    # Rate Limiting
#    limit_req zone=addr burst=20; # Max burst of request
#    limit_req_status 460; # Status to send
#
#    # Bandwidth Limiting
#    limit_rate 4096k; # Speed limit (here is on kb/s)
#
#    # Micro caching
#    proxy_cache microcacheapi;
#    proxy_cache_valid 200 1s;
#    proxy_cache_use_stale updating;
#    proxy_cache_background_update on;
#    proxy_cache_lock on;
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-Forwarded-Proto $scheme;
#    proxy_set_header Host $http_host;
#
#    # we don't want nginx trying to do something clever with
#    # redirects, we set the Host: header above already.
#    proxy_redirect off;
#    proxy_pass http://localhost:8000;
#  }
#
#  location / {
#    # checks for static file, if not found proxy to app
#    try_files $uri @proxy_to_app;
#  }
#}
